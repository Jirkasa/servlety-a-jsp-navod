<%- include("../../includes/page-start.ejs", {pathToRootFolder: "../../", title: "Ochrana proti CSRF útokům", metaAuthor: "Jiří Satora", metaDescription: "Článek o ochraně proti CSRF útokům v servletech.", useHighlightJS: true}) %>
    <%- include("../../includes/header.ejs", {pathToRootFolder: "../../", activeLink: "dalsi-tutorialy"}) %>
    <%- include("../../includes/other-tutorial-page-layout-start.ejs", {pathToOtherTutorialsFolder: "../", activeLink: "ochrana-proti-csrf-utokum"}) %>
        <h1 class="heading-primary u-mb-2">Ochrana proti CSRF útokům</h1>
        <p class="article-author u-mb-4"><span class="article-author__label">Autor:</span> <a rel="author" href="https://jirkasa.github.io/" target="_blank" class="link">Jiří Satora</a></p>
        <p class="paragraph u-mb-4">V tomto článku se dozvíte, co to jsou CSRF útoky a jak se proti nim bránit. Jedná se o věc, o které podle mě spousta začínajících programátorů webových aplikací ani neví, ale pro bezpečnost webových aplikací je ochrana proti CSRF útokům velmi důležitá.</p>
        <h2 id="co-jsou-csrf-utoky" class="heading-secondary u-mb-2">Co jsou CSRF útoky</h2>
        <p class="paragraph u-mb-2">Ke Cross-Site Request Forgery (CSRF) útoku dochází, když škodlivá webová stránka přiměje webový prohlížeč provést nějakou operaci na jiném webu, na kterém je uživatel, který webový prohlížeč používá, přihlášen. Webová stránka totiž má možnost posílat requesty i mimo vlastní doménu. Tímto způsobem prohlížeče fungují, není to nic neobvyklého. Příkladem mohou být odkazy, které se na webové stránce mohou nacházet a odkazovat na jakoukoliv jinou webovou stránku na internetu. Stejným způsobem to ale funguje také třeba s formuláři. Takže se může stát, že útočník na svoji webovou stránku umístí formulář směřující na jiný web, který uživatel po otevření stránky odešle. Může to být dokonce provedeno automaticky přes JavaScript.</p>
        <p class="paragraph u-mb-4">Implementovat ochranu proti CSRF útokům je důležité, protože samozřejmě nechceme, aby si mohla jakákoliv webová stránka jen tak posílat requesty na náš web, na kterém jsou naši uživatelé přihlášení a provádět za ně různé operace. Implementace ochrany proti CSRF útokům není tak složitá, jak by se na první pohled mohlo zdát. Základní princip spočívá v použití tzv. CSRF tokenů. Jedná se o unikátní hodnotu generovanou serverem, která je přidána do každého formuláře nebo požadavku, který na serveru provádí nějakou operaci, která mění data (formuláře, které slouží jen pro nějaké vyhledávání dat, se samozřejmě zabezpečovat nemusí). Tento token je poté zkontrolován při každém požadavku na server, aby se zajistilo, že požadavek pochází od oprávněného uživatele. Až se pustíme do implementace CSRF ochrany ve vzorové aplikaci, tak pravděpodobně pochopíte jak to funguje. Více si o tvorbě CSRF ochrany můžete přečíst třeba <a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md" target="_blank" class="link">zde</a>.</p>
        <h2 id="ukazka-provedeni-csrf-utoku" class="heading-secondary u-mb-2">Ukázka provedení CSRF útoku</h2>
        <p class="paragraph u-mb-4">Abychom si ukázali, jak CSRF útok může vypadat, vytvoříme si testovací aplikaci, kterou poté napadneme škodlivou webovou stránkou. Bude se jednat o aplikaci, ve které se uživatel bude moci zaregistrovat/přihlásit. Také bude mít možnost svůj účet po přihlášení zrušit. Právě to potom uděláme za uživatele, když navštíví naši škodlivou webovou stránku.</p>
        <h3 id="vytvoreni-testovaci-aplikace" class="heading-tertiary u-mb-1">Vytvoření testovací aplikace</h3>
        <p class="paragraph u-mb-2">Začneme tím, že si založíme nový Maven projekt, který můžeme pojmenovat třeba jako "example-app". Jako závislost si do souboru pom.xml nadefinujeme servlety.</p>
        <%- include("./includes/create-example-app-code-box-1.ejs") %>
        <p class="paragraph u-mb-2">Teď můžeme vytvořit složku WEB-INF a v ní soubor web.xml, ve kterém si nadefinujeme a namapujeme servlety, které později vytvoříme. Obsah souboru ukazuje následující ukázka.</p>
        <%- include("./includes/create-example-app-code-box-2.ejs") %>
        <p class="paragraph u-mb-2">Jak můžete v souboru web.xml vidět, naše aplikace se bude skládat z pěti servletů. Začneme se servletem pro domovskou stránku. Jeho kód a JSP stránky, které vykresluje, ukazují následující ukázky. Servlety můžete vytvářet v balíčku "com.example.servlets" a JSP soubory ve složce WEB-INF/jsp (kdyžtak si to můžete prohlédnou po otevření levého panelu u každé ukázky). Podle toho, zda je uživatel přihlášen (zda je objekt, který uživatele reprezentuje, uložen v session) se zobrazí buď uživatelská domovoská stránka, nebo veřejná domovská stránka.</p>
        <%- include("./includes/create-example-app-code-box-3.ejs") %>
        <%- include("./includes/create-example-app-code-box-4.ejs") %>
        <%- include("./includes/create-example-app-code-box-5.ejs") %>
        <p class="paragraph u-mb-2">Uživatel bude reprezentován třídou User. Její instance budou moci být ukládány v databázi, kterou bude představovat třída UsersDatabase. Obě třídy ukazují následující ukázky. Můžete je vytvořit v balíčku "com.example.model". Nemusíte vůbec zkoumat jak třída UsersDatabase funguje. Je to jen taková testovací databáze, která ukládá data v paměti, abychom pro naše účely nemuseli používat opravdovou databázi.</p>
        <%- include("./includes/create-example-app-code-box-6.ejs") %>
        <%- include("./includes/create-example-app-code-box-7.ejs") %>
        <p class="paragraph u-mb-2">Teď můžeme vytvořit servlet pro registraci uživatele. Jeho kód a JSP stránku, kterou vykresluje, ukazují následující ukázky. Servlet zpracovává GET i POST requesty. V metodě doGet zobrazuje stránku s formulářem a v metodě doPost tento formulář zpracovává.</p>
        <%- include("./includes/create-example-app-code-box-8.ejs") %>
        <%- include("./includes/create-example-app-code-box-9.ejs") %>
        <p class="paragraph u-mb-2">Dále vytvoříme servlet pro přihlášení. Jeho kód a JSP stránku, kterou vykresluje, si opět můžete prohlédnout v následujích ukázkách.</p>
        <%- include("./includes/create-example-app-code-box-10.ejs") %>
        <%- include("./includes/create-example-app-code-box-11.ejs") %>
        <p class="paragraph u-mb-2">Teď vytvoříme servlet pro smazání účtu. Pokud si bude chtít uživatel smazat účet, tak se mu nejprve zobrazí stránka, kde na to bude mít tlačítko, a když na toto tlačítko klikne, tak se jeho účet smaže. Následující ukázky ukazují kód servletu a JSP stránky.</p>
        <%- include("./includes/create-example-app-code-box-12.ejs") %>
        <%- include("./includes/create-example-app-code-box-13.ejs") %>
        <p class="paragraph u-mb-2">Teď již zbývá jen servlet pro odhlášení. Ukazuje jej následující ukázka.</p>
        <%- include("./includes/create-example-app-code-box-14.ejs") %>
        <p class="paragraph u-mb-2">Naše aplikace je hotová. Pokud jste si ji sami neprogramovali podle tohoto článku, tak si alespoň v následujícím slideru můžete prohlédnout jak vypadá, a jak ji uživatel může používat.</p>
        <%- include("./includes/example-app-slider.ejs") %>
        <h3 id="vytvoreni-skodlive-webove-stranky" class="heading-tertiary u-mb-1">Vytvoření škodlivé webové stránky</h3>
        <p class="paragraph u-mb-2">Teď když máme připravenou testovací aplikaci, tak si vytvoříme webovou stránku, pomocí které tuto aplikaci napadneme. Pokud si ji přihlášený uživatel otevře, smaže se mu účet.</p>
        <p class="paragraph u-mb-2">Založíme si nový Maven projekt (můžete jej pojmenovat třeba jako "bad-app") a jedinou věc kterou uděláme, je vytvoření JSP stránky s názvem "Home.jsp" přímo ve složce webapp, abychom nemuseli nic mapovat v souboru web.xml. Kód stránky ukazuje následující ukázka. Nachází se na ní formulář, který se posílá na servlet pro smazání účtu metodou POST. Tento formulář se navíc automaticky odesílá při načtení stránky přes JavaScript, takže opravdu stačí jen to, že uživatel webovou stránku navštíví.</p>
        <%- include("./includes/bad-app-code-box.ejs") %>
        <h3 id="smazani-uctu-prihlaseneho-uzivatele" class="heading-tertiary u-mb-1">Smazání účtu přihlášeného uživatele</h3>
        <p class="paragraph u-mb-2">Aplikaci pro naši škodlivou stránku si nasadíme na jiný server, který spustíme na jiném portu (například na 9090). Pokud používáte Eclipse IDE, tak si v následujícím slideru můžete prohlédnout, jak to udělat.</p>
        <%- include("./includes/add-second-server-to-eclipse-slider.ejs") %>
        <p class="paragraph u-mb-4">Server s testovací aplikací i server se škodlivou webovou stránkou si můžete spustit. V testovací aplikaci si můžete zkusit zaregistrovat uživatele a nechat jej přihlášeného. Poté můžete navštívit škodlivou webovou stránku a tomuto přihlášenému uživateli by se měl smazat účet. Pokud jste nastavili port serveru na 9090, tak bude škodlivá webová stránka k dispozici zde: <a href="http://localhost:9090/bad-app/Home.jsp" target="_blank" class="link">http://localhost:9090/bad-app/Home.jsp</a>.</p>
        <h2 id="implementace-ochrany-proti-csrf-utokum" class="heading-secondary u-mb-2">Implementace ochrany proti CSRF útokům</h2>
        <p class="paragraph u-mb-2">Když jsme si teď ukázali, jak CSRF útok může vypadat, tak si také ukážeme, jak se proti němu bránit. Jak jsem již psal, používají se k tomu tzv. CSRF tokeny. Jedná se o unikátní hodnotu, která je pro každého uživatele vygenerována na serveru, a přidává se do každého formuláře, který na serveru provádí nějakou operaci (většinou jako skrytý input typu hidden). Když se formulář s CSRF tokenem odešle, tak se zjistí, zda je CSRF token validní a pokud ne, server požadovanou operaci neprovede. Škodlivá stránka se samozřejmě posílá ze serveru útočníka, který k CSRF tokenu uloženém v naší aplikaci nemá přístup, a nemůže jej tedy jen tak umístit do svého formuláře, směřující na náš server.</p>
        <p class="paragraph u-mb-2">V naší aplikaci nám tedy stačí pro uživatele vygenerovat nějakou náhodnou hodnotu, uložit ji do session a při každém requestu o smazání účtu kontrolovat, zda se tato hodnota posílá a zda je správná. Následující ukázka ukazuje upravený kód servletu pro smazání účtu. Při načítání stránky (pro GET request) generujeme pro uživatele CSRF token (pokud jej ještě nemá vygenerovaný) a nastavujeme jej jako atribut do requestu, aby jej mohla JSP stránka přidat do formuláře. Při zpracovávání formuláře poté zjišťujeme, zda je CSRF token správný a můžeme uživateli účet smazat. Pokud správný není, tak posíláme chybovou stránku.</p>
        <%- include("./includes/add-csrf-protection-code-box-1.ejs") %>
        <p class="paragraph u-mb-2">Upravenou JSP stránku "DeleteAccountPage.jsp", která teď do formuláře navíc přidává skrytý input s hodnotou CSRF tokenu ukazuje následující ukázka.</p>
        <%- include("./includes/add-csrf-protection-code-box-2.ejs") %>
        <p class="paragraph u-mb-2">Novou JSP stránku, která se zobrazuje když se pošle špatný CSRF token, ukazuje následující ukázka. Obsahuje pouze zprávu o tom, že se poslal špatný token.</p>
        <%- include("./includes/add-csrf-protection-code-box-3.ejs") %>
        <p class="paragraph u-mb-2">Pokud si nyní v naší testovací aplikaci necháte přihlášeného uživatele a zkusíte navštívit škodlivou webovou stránku, tak se vám zobrazí stránka se zprávou, že byl poslán špatný CSRF token, ale účet se nesmaže. Úspěšně jsme tedy implementovali ochranu proti CSRF útokům.</p>
        <img src="../../static/img/screenshots/CSRFTokenUkazkovaAplikaceSpatnyCSRFToken.png" alt="Chybová stránka - špatný CSRF token" class="image image--full-width image--with-border u-mb-2">
        <p class="paragraph u-mb-4">Možná vás napadlo to, že by si útočník mohl stránku pro smazání účtu uživatele stáhnout pomocí JavaScriptu a přečíst si z ní CSRF token, který by vložil do svého formuláře, než by jej odeslal. To ale defaultně udělat nemůže. Webové prohlížeče totiž implementují mechanismus, kterému se říká Cross-Origin Resource Sharing (CORS). Více si o tom můžete přečíst třeba na <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" class="link">MDN</a>. JavaScript jednoduše nemá přístup k odpovědím z requestů, které posílá na servery v jiné doméně. Museli by mu to dovolit pomocí HTTP headeru Access-Control-Allow-Origin. Buďte tedy při nastavování tohoto headeru opatrní a nenastavujte jej jen tak pro každého.</p>
        <h2 id="csrf-ochrana-pro-knihovnu-servlet-router" class="heading-secondary u-mb-2">CSRF ochrana pro knihovnu Servlet Router</h2>
        <p class="paragraph u-mb-2">Pokud pro tvorbu webových aplikací používáte knihovnu Servlet Router, o které jsem psal v <a href="../servlet-router/" class="link">tomto článku</a>, tak můžete pro implementaci ochrany proti CSRF útokům použít middleware, který jsem pro ni vytvořil.</p>
        <div class="buttons-banner u-mb-2">
            <a href="https://mvnrepository.com/artifact/io.github.jirkasa/servlet-router-csrf-protection" target="_blank" class="buttons-banner__button buttons-banner__button--mvn-repository">
                <svg>
                    <use xlink:href="../../static/icon-sprite.svg#mvn-repository"></use>
                </svg>
                <span>MVN Repository</span>
            </a>
            <a href="https://jirkasa.github.io/servlet-router-csrf-protection/io/github/jirkasa/csrfprotection/package-summary.html" target="_blank" class="buttons-banner__button buttons-banner__button--javadoc">
                <svg>
                    <use xlink:href="../../static/icon-sprite.svg#java"></use>
                </svg>
                <span>JavaDoc</span>
            </a>
            <a href="https://github.com/Jirkasa/servlet-router-csrf-protection" target="_blank" class="buttons-banner__button buttons-banner__button--github">
                <svg>
                    <use xlink:href="../../static/icon-sprite.svg#github"></use>
                </svg>
                <span>GitHub</span>
            </a>
        </div>
        <p class="paragraph u-mb-2">Implementace CSRF ochrany pomocí tohoto middlewaru je velmi jednoduchá. Stačí si vytvořit podtřídu třídy <a href="https://jirkasa.github.io/servlet-router-csrf-protection/io/github/jirkasa/csrfprotection/CSRFProtection.html" target="_blank" class="link">CSRFProtection</a> a implementovat metodu handleError. Tato metoda se volá, když se nepředá žádný nebo špatný CSRF token a můžete v ní tedy třeba poslat nějakou stránku s chybovou zprávou. Poté stačí middleware zaregistrovat někde na začátku vašeho hlavního routeru. Bude se starat o generování CSRF tokenu pro každou session, jeho nastavování jako atributu do requestu a dále také samozřejmě  bude pro každý request poslaný HTTP metodou, která mění data, ověřovat, zda se CSRF token předává a zda je správný. Příklad vytvoření middlewaru a jeho zaregistrování ukazuje následující ukázka.</p>
        <%- include("./includes/servlet-router-csrf-protection-example-code-box.ejs") %>
        <p class="paragraph u-mb-2">CSRFProtection middleware nastavuje CSRF token jako atribut requestu, takže jej potom můžete v JSP stránkách přidávat do formulářů jako skrytý input, nebo nastavovat jako globální proměnnou pro JavaScript. Příklad ukazuje následující ukázka.</p>
        <%- include("./includes/servlet-router-set-csrf-token-code-box.ejs") %>
        <p class="paragraph u-mb-2">Defaultně jsou proti CSRF útokům chráněny pouze metody POST, PUT, PATCH a DELETE. U metod GET, HEAD, TRACE a OPTIONS se totiž předpokládá, že je nebudete používat pro žádné měnění dat na serveru. Formuláře posílané metodou GET by měli sloužit jen pro získání nějakých dat, takže nejsou z hlediska CSRF útoků nebezpečné. Pokud byste to ale chtěli změnit, tak si můžete sami nadefinovat, které HTTP metody mají být zabezpečené (nedoporučuji to).</p>
        <%- include("./includes/servlet-router-set-csrf-protected-methods-code-box.ejs") %>
        <p class="paragraph u-mb-2">Pokud by vám nevyhovoval název atributu "CSRF_TOKEN", tak jej lze také změnit, jak ukazuje následující ukázka.</p>
        <%- include("./includes/servlet-router-change-csrf-token-attribute-name-code-box.ejs") %>
        <p class="paragraph u-mb-2">Pokud byste chtěli změnit název atributu i chráněné metody zároveň, tak můžete do konstruktoru předat dva parametry, jak ukazuje následující ukázka.</p>
        <%- include("./includes/servlet-router-csrf-protection-customize-both-options-code-box.ejs") %>
    <%- include("../../includes/other-tutorial-page-layout-end.ejs") %>
    <%- include("../../includes/footer.ejs") %>
<%- include("../../includes/page-end.ejs") %>