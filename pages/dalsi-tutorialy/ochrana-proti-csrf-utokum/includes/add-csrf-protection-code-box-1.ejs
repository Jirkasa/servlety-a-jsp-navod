<div data-project="16" data-project-extends="14" class="u-mb-2">
    <pre data-code="DeleteAccountServlet.java" data-java-package="com.example.servlets" data-java-package-opened data-active data-code-highlight="29-43,60-76,87-94"><code class="language-java">package com.example.servlets;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.example.model.User;
import com.example.model.UsersDatabase;

public class DeleteAccountServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        HttpSession session = req.getSession();
        User loggedUser = (User) session.getAttribute("LOGGED_USER");
        
        if (loggedUser == null) {
            res.sendRedirect("./home");
            return;
        }
        
        String csrfToken = (String) session.getAttribute("CSRF_TOKEN");
        
        // pokud CSRF token ještě pro uživatele není vygenerovaný,
        // tak se vygeneruje a uloží do session
        if (csrfToken == null) {
            try {
                csrfToken = generateToken();
                session.setAttribute("CSRF_TOKEN", csrfToken);
            } catch (NoSuchAlgorithmException e) {
                System.out.println(e);
            }
        }
        
        // nastavení CSRF tokenu do requestu, aby jej JSP stránka mohla přidat do formuláře
        req.setAttribute("CSRF_TOKEN", csrfToken);
        
        RequestDispatcher dispatcher = req.getRequestDispatcher("/WEB-INF/jsp/DeleteAccountPage.jsp");
        dispatcher.forward(req, res);
    }
    
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        HttpSession session = req.getSession();
        User loggedUser = (User) session.getAttribute("LOGGED_USER");
        
        // pokud uživatel není přihlášen, tak je jen přesměrován na hlavní stránku
        if (loggedUser == null) {
            res.sendRedirect("./home");
            return;
        }
        
        // získání CSRF tokenu ze session
        String csrfToken = (String) session.getAttribute("CSRF_TOKEN");
        // získání CSRF tokenu z poslaného formuláře
        String passedCsrfToken = (String) req.getParameter("CSRF_TOKEN");
        
        // pokud CSRF token nebyl poslán, neshoduje se s CSRF tokenem uloženým v session nebo ještě
        // pro uživatele nebyl vygenerován, tak se namísto smazání účtu zobrazí chybová stránka
        if (
            csrfToken == null
            || passedCsrfToken == null
            || !csrfToken.equals(passedCsrfToken)
        ) {
            res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            RequestDispatcher dispatcher = req.getRequestDispatcher("/WEB-INF/jsp/BadCSRFTokenPage.jsp");
            dispatcher.forward(req, res);
            return;
        }
            
        
        // odstranění uživatele z databáze
        UsersDatabase.deleteUserById(req, loggedUser.getId());
        // odstranění uživatele ze session
        session.removeAttribute("LOGGED_USER");
        // přesměrování na hlavní stránku
        res.sendRedirect("./home");
    }
    
    // metoda pro vygenerování CSRF tokenu
    public static String generateToken() throws NoSuchAlgorithmException {
        SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
        byte[] data = new byte[16];
        secureRandom.nextBytes(data);

        return Base64.getEncoder().encodeToString(data);
    }
}</code></pre>
</div>