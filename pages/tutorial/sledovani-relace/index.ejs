<%- include("../../includes/page-start.ejs", {pathToRootFolder: "../../"}) %>
    <%- include("../../includes/header.ejs") %>
    <%- include("../../includes/tutorial-page-layout-start.ejs") %>
        <h1 class="heading-primary u-mb-4">Sledování relace</h1>
        <p class="paragraph u-mb-4">V této části si ukážeme různé způsoby, jak můžeme sledovat stav uživatelské relace ve webové aplikaci. HTTP je stateless protokol. To znamená, že každý request od klienta je nezávislý a server nemá automaticky informace o předchozím stavu. Možná to moc nechápete, ale neumím to lépe popsat. Prostě chceme ukládat nějaká data o uživateli, když naši webovou aplikaci používá. Chceme třeba ukládat, co má uživatel v nákupním košíku a tak podobně. HTTP protokol funguje tak, že se jen pošle request a ze serveru se vrátí response. Nikde se žádná data neukládají. Proto musíme použít různé způsoby, jak uživatele sledovat, když naši webovou aplikaci používá a prochází více webových stránek.</p>
        <h2 class="heading-secondary u-mb-2">Techniky sledování relace</h2>
        <p class="paragraph u-mb-1">Pro sledování relace (session tracking) existují různé techniky. Zde jsou vypsané:</p>
        <ul class="list u-mb-4">
            <li><b>Cookies</b> - můžeme nastavit hodnoty, které si prohlížeč uloží a bude je automaticky posílat při každém requestu</li>
            <li><b>URL rewriting</b> - můžeme serveru poslat v URL query parametr a on jej může použít při generování stránky</li>
            <li><b>Skryté inputy</b> - do HTML formuláře můžeme umístit skryté inputy, které se pošlou na server, když se formulář odešle</li>
            <li><b>Parametry v URL</b> - můžeme posílat parametry jako součást URL cesty (např. https://localhost:8080/produkty/[parametr])</li>
            <li><b>Sessions</b> - můžeme ukládat informace o uživateli na serveru a klientovi pošleme cookie s identifikátorem, přes který se k nim dostane</li>
        </ul>
        <h2 class="heading-secondary u-mb-2">URL rewriting</h2>
        <p class="paragraph u-mb-2">Jako první si ukážeme URL rewriting. Naprogramujeme si aplikaci, ve které uživatel na úvodní stránce zadá ve formuláři jméno. Když jej pošle, tak se mu zobrazí stránka, která jej pozdraví. Na této stránce bude navíc ještě odkaz na jinou stránku, která uživateli vypíše, jaké je jeho jméno. Jde o to, abychom si zkusili pomocí URL rewritingu uživatelovo jméno pamatovat napříč stránkami.</p>
        <p class="paragraph u-mb-2">Vytvoříme si Maven projekt (jak to udělat v Eclipse je popsáno v první části tutoriálu) a servlet ZadejJmenoServlet, který uživateli pošle stránku s formulářem. Generování stránek pro nás zatím není moc komfortní. To se zlepší, až začneme používat JSP.</p>
        <%- include("./includes/url-rewriting-code-box-1.ejs") %>
        <p class="paragraph u-mb-2">Vytvoříme si soubor web.xml (ve složce src/main/webapp/WEB-INF) a servlet namapujeme třeba na URL "/zadej-jmeno".</p>
        <%- include("./includes/url-rewriting-code-box-2.ejs") %>
        <p class="paragraph u-mb-2">Po spuštění aplikace si můžete stránku zobrazit otevřením <a href="http://localhost:8080/url-rewriting/zadej-jmeno" target="_blank" class="link">http://localhost:8080/url-rewriting/zadej-jmeno</a>.</p>
        <img src="../../static/img/screenshots/URLRewritingZadejJmenoStranka.png" alt="Stránka pro zadání jména" class="image image--full-width image--with-border u-mb-2">
        <p class="paragraph u-mb-2">Teď si vytvoříme servlet pro stránku s pozdravem. Pojmenujeme jej třeba jako PozdravServlet. Budeme reagovat na requesty poslané metodou POST, protože formulář touto metodou odesíláme. Implementujeme tedy metodu doPost, ve které získáme uživatelovo jméno a zobrazíme jej na stránce kterou vygenerujeme. Také na stránku umístíme odkaz na stránku ke zjištění jména, který bude mít jako query parametr nastavený uživatelovo jméno.</p>
        <%- include("./includes/url-rewriting-code-box-3.ejs") %>
        <p class="paragraph u-mb-2">Ve web.xml servlet namapujeme na "/pozdrav", jelikož tam směřuje formulář, který jsme vytvořili pro zadání jména.</p>
        <%- include("./includes/url-rewriting-code-box-4.ejs") %>
        <p class="paragraph u-mb-2">Když teď na stránce pro zadání jména zadáme ve formuláři jméno a odešleme jej, tak se nám zobrazí stránka s pozdravem a naše jméno nám vypíše.</p>
        <img src="../../static/img/screenshots/URLRewritingPozdravStranka.png" alt="Stránka s pozdravem" class="image image--full-width image--with-border u-mb-2">
        <p class="paragraph u-mb-2">Na stránku s pozdravem jsme také přidali odkaz na stránku, která nám jméno vypíše ještě jednou. Takže si pro ni vytvoříme servlet. Můžeme jej pojmenovat třeba jako JakeJeJmenoServlet. Následující ukázka jej ukazuje.</p>
        <%- include("./includes/url-rewriting-code-box-5.ejs") %>
        <p class="paragraph u-mb-2">V souboru web.xml můžeme servlet namapovat na "/jake-je-jmeno".</p>
        <%- include("./includes/url-rewriting-code-box-6.ejs") %>
        <p class="paragraph u-mb-2">Pokud teď kliknete na odkaz na stránce s pozdravem, tak se vám otevře stránka, kterou ukazuje následující obrázek, a zobrazí se vám zadané jméno.</p>
        <img src="../../static/img/screenshots/URLRewritingJakeJeJmenoStranka.png" alt="Stránka zobrazující jméno" class="image image--full-width image--with-border u-mb-2">
        <p class="paragraph u-mb-4">O čemu URL rewriting je, vám je teď už asi jasné. Je to o tom, že do odkazů nastavujeme query parametry a ukládáme tím tedy informace mezi stránkami.</p>
        <h2 class="heading-secondary u-mb-2">Skryté inputy</h2>
        <p class="paragraph u-mb-2">Jako další techniku pro sledování relace si ukážeme použití skrytých inputů ve formulářích. Pro jeho vyzkoušení nám stačí upravit třídu PozdravServlet z ukázky pro url-rewriting. Namísto odkazu na stránku přidáme formulář se skrytým inputem (nastavíme mu atribut type na hidden) a tlačítkem pro jeho odeslání. Formulář se bude posílat metodou GET abychom nemuseli upravovat i třídu JakeJeJmenoServlet. To znamená, že se hodnoty formuláře budou posílat jako query string v URL (výsledné URL requestu bude stejné jako u odkazu).</p>
        <%- include("./includes/skryte-inputy-code-box-1.ejs") %>
        <p class="paragraph u-mb-2">Následující obrázek ukazuje, jak teď bude stránka s pozdravem vypadat. Tlačítko se chová úplně stejně jako předtím odkaz.</p>
        <img src="../../static/img/screenshots/SkryteInputyPozdravStranka.png" alt="Předělaná stránka s pozdravem" class="image image--full-width image--with-border u-mb-6">
        <h2 class="heading-secondary u-mb-2">Parametry v URL</h2>
        <p class="paragraph u-mb-2">Další věcí, kterou si ukážeme, jsou parametry v URL cestě. V tomto případě nebudeme upravovat předchozí projekt, ale vytvoříme si nový. Pro ukázku nám bude stačit vytvořit jen jeden servlet. Parametr předáme přímo v URL, když si budeme stránku otevírat. Můžeme jej pojmenovat třeba jako MujServlet. Bude sloužit jen k tomu, že vypíše URL parametr na stránku. Nejdříve si ale v tomto případě vytvoříme soubor web.xml, kde si servlet namapujeme pro URL pattern. Nastavíme mu url-pattern na "/muj-servlet/*". To znamená, že se zavolá pro všechno, co začíná na "/muj-servlet". Budeme tedy schopni předat URL parametr.</p>
        <%- include("./includes/url-parametry-code-box-1.ejs") %>
        <p class="paragraph u-mb-2">Teď můžeme vytvořit servlet. Ukazuje jej následující ukázka. Pro získání části cesty, která se nachází za částí "/muj-servlet" používáme metodu getPathInfo. Například pro "https://localhost:8080/muj-servlet/neco/aaa" vrátí "/neco/aaa".</p>
        <%- include("./includes/url-parametry-code-box-2.ejs") %>
        <p class="paragraph u-mb-2">Pokud si aplikaci spustíte a navštívíte třeba <a href="http://localhost:8080/url-parametry/muj-servlet/muj-text" target="_blank" class="link">http://localhost:8080/url-parametry/muj-servlet/muj-text</a>, tak uvidíte úplně stejnou stránku, kterou ukazuje následující obrázek.</p>
        <img src="../../static/img/screenshots/URLParametryStranka.png" alt="Stránka zobrazující URL parametr" class="image image--full-width image--with-border u-mb-6">
        <h2 class="heading-secondary u-mb-2">Cookies</h2>
        <p class="paragraph u-mb-2">Předchozí techniky, které jsme si ukázali, jsou spíš jen takové mechanismy pro předání informací z jedné stránky na jinou. Pokud ale chceme o uživateli naší webové aplikace uložit nějaká data dlouhodoběji a používat je při každém requestu, který pošle na server, tak existují jiné možnosti (v podstatě asi dvě). Jedna z nich jsou <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies" target="_blank" class="link">cookies</a>.</p>
        <p class="paragraph u-mb-4">Cookies jsou malé textové soubory, které si klient (prohlížeč) ukládá na lokální disk a posílá je na server spolu s requesty, které posílá. Mají hodnoty ve formě klíče a hodnoty. Jsou vytvořeny serverem a posílány jen na server, který je vytvořil. Cookies server u klienta vytváří pomocí headeru "Set-Cookie", který posílá v HTTP odpovědi. Klient si tento header přečte a cookie uloží. Poté jej na server předává při každém requestu pomocí headeru "Cookie".</p>
        <h3 class="heading-tertiary u-mb-1">Co můžeme u cookie nastavit</h3>
        <p class="paragraph u-mb-1">Kromě hodnoty můžeme pro cookie nastavit i další vlastnosti. Co všechno můžeme nastavit, popisuje následující seznam:</p>
        <ul class="list u-mb-2">
            <li><b><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#domaindomain-value" target="_blank" class="link">Domain</a></b> - určuje doménu, pro kterou se má cookie nastavit (jde použít jen aktuální doména, nebo doména vyššího řádu)</li>
            <li><b><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#expiresdate" target="_blank" class="link">Expires</a></b> - nastavuje <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date" target="_blank" class="link">datum</a>, kdy má vypršet platnost cookie (kdy se má odstranit)</li>
            <li><b><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#httponly" target="_blank" class="link">HttpOnly</a></b> - nastavuje, že ke cookie nebude mít přístup JavaScript</li>
            <li><b><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#max-agenumber" target="_blank" class="link">Max-Age</a></b> - nastavuje počet sekund, po kterých vyprší platnost cookie (kdy se odstraní) - pokud je nastaveno Expires i Max-Age, tak má přednost Max-Age.</li>
            <li><b><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#partitioned" target="_blank" class="link">Partitioned</a></b> - nevím k čemu to slouží</li>
            <li><b><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#pathpath-value" target="_blank" class="link">Path</a></b> - nastavuje cestu, která musí existovat v URL, aby se cookie poslala</li>
            <li><b><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value" target="_blank" class="link">SameSite</a></b> - určuje, jestli se má cookie použít i pro cross-site requsty a poskytuje určitou ochranu proti <a href="https://developer.mozilla.org/en-US/docs/Glossary/CSRF" target="_blank" class="link">CSRF útokům</a></li>
            <li><b><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#secure" target="_blank" class="link">Secure</a></b> - určuje, jestli se má cookie posílat jen pro requesty poslané přes HTTPS</li>
        </ul>
        <p class="paragraph u-mb-2">Jak může "Set-Cookie" header vypadat, ukazuje následující ukázka:</p>
        <%- include("./includes/set-cookie-header-code-box.ejs") %>
        <h3 class="heading-tertiary u-mb-1">Práce s cookies v servletech</h3>
        <p class="paragraph u-mb-2">V servletech máme pro vytváření cookies třídu <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/Cookie.html" target="_blank" class="link">Cookie</a>. Nemusíme tedy header "Set-Cookie" nastavovat ručně sami. Stačí vytvořit instanci této třídy a zavolat metodu <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletResponse.html#addCookie-javax.servlet.http.Cookie-" target="_blank" class="link">addCookie</a> HttpServletResponse objektu, které vytvořenou cookie předáme.</p>
        <p class="paragraph u-mb-2">Pro ukázku práce s cookies si vytvoříme podobnou aplikaci, kterou jsme si vytvořili pro ukázku URL rewritingu. V tomto případě ale nebudeme jméno předávat nikde v URL, ale pomocí cookie. Vytvoříme nový Maven projekt a servlet pro stránku na zadání jména, který můžeme pojmenovat třeba jako ZadejJmenoServlet. Bude v podstatě stejný jako servlet z předchozí aplikace, jen atribut action formuláře bude nastaven na "./jmeno". Ukazuje jej následující ukázka.</p>
        <%- include("./includes/cookies-code-box-1.ejs") %>
        <p class="paragraph u-mb-2">Servlet můžeme v souboru web.xml namapovat třeba opět na "/zadej-jmeno".</p>
        <%- include("./includes/cookies-code-box-2.ejs") %>
        <p class="paragraph u-mb-2">Po spuštění aplikace a navštívení <a href="http://localhost:8080/cookies/zadej-jmeno" target="_blank" class="link">http://localhost:8080/cookies/zadej-jmeno</a> uvidíte stránku, kterou ukazuje následující obrázek.</p>
        <img src="../../static/img/screenshots/CookiesZadejJmenoStranka.png" alt="Stránka pro zadání jména" class="image image--full-width image--with-border u-mb-2">
        <p class="paragraph u-mb-2">Teď si vytvoříme servlet, který zpracuje formulář poslaný metodou POST a také pošle stránku, na které jméno zobrazí, když obdrží GET request. Pojmenujeme jej jako JmenoServlet. Následující ukázka ukazuje implementaci metody doPost, která získá z poslaného formuláře jméno a uloží jej do cookie. Poté uživatele přesměruje na stránku, kde se mu uživatelské jméno zobrazí. Používá se metoda <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletResponse.html#sendRedirect-java.lang.String-" target="_blank" class="link">sendRedirect</a>, která vlastně namísto stránky pošle HTTP response se <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302" target="_blank" class="link">status kódem 302</a>. Ten prohlížeči říká, že má provést HTTP request na jinou URL.</p>
        <%- include("./includes/cookies-code-box-3.ejs") %>
        <p class="paragraph u-mb-2">V metodě doGet si hodnotu cookie přečteme a pokud existuje, tak ji zobrazíme na stránce. Kromě toho na stránku přidáme odkaz na nastavení nového jména (nové hodnoty cookie). Následující ukázka metodu doGet ukazuje. Pro získání všech cookies se používá metoda <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletRequest.html#getCookies--" target="_blank" class="link">getCookies</a>, která vrací pole nebo null. V tomto poli poté hledáme příslušnou cookie, která obsahuje hodnotu pro jméno.</p>
        <%- include("./includes/cookies-code-box-4.ejs") %>
        <p class="paragraph u-mb-2">V souboru web.xml servlet namapujeme na "/jmeno".</p>
        <%- include("./includes/cookies-code-box-5.ejs") %>
        <p class="paragraph u-mb-2">Po vyplnění jména se vám nyní otevře stránka <a href="http://localhost:8080/cookies/jmeno" target="_blank" class="link">http://localhost:8080/cookies/jmeno</a>, na které se vám vaše zadané jméno zobrazí.</p>
        <img src="../../static/img/screenshots/CookiesZadaneJmenoStranka.png" alt="Stránka se zadaným jménem" class="image image--full-width image--with-border u-mb-2">
        <p class="paragraph u-mb-4">Když to shrneme, tak cookies jsou zjednodušeně hodnoty, které může server klientovi nastavit, aby je při každém requestu na server posílal.</p>
        <h2 class="heading-secondary u-mb-2">Sessions</h2>
        <p class="paragraph u-mb-2">Cookies se ukládají u klienta. Je tedy možné, že si může jejich hodnoty změnit, aniž by k tomu dostal příkaz ze serveru. Alternativa je ukládat data uživatele na serveru, kde je již jen tak modifikovat nemůže. Klient akorát k datům, které mu patří, dostane unikátní identifikátor ve formě hodnoty v cookie. Tuto cookie klient posílá při každém requestu a server podle něj najde data, která s ním jsou spjata.</p>
        <p class="paragraph u-mb-2">Pro ukládání dat uživatele na serveru (v session) se používá objekt typu <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpSession.html" target="_blank" class="link">HttpSession</a>. Můžeme jej získat na HttpServletRequest objektu zavoláním metody <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletRequest.html#getSession--" target="_blank" class="link">getSession</a>. Tato metoda vrací session, která je spjata s klientem, který poslal request. Pokud session ještě není vytvořena (metoda getSession se volá poprvé), tak se nejprve vytvoří a až poté vrátí. Následující tabulka popisuje metody, které u HttpSession objektu můžeme použít.</p>
        <table class="table u-mb-4">
            <thead>
                <tr>
                    <th>Metoda</th>
                    <th>Návratový typ</th>
                    <th>Popis</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>getAttribute(String name)</td>
                    <td>Object</td>
                    <td>Vrací objekt uložený v session podle předaného jména.</td>
                </tr>
                <tr>
                    <td>getAttributeNames()</td>
                    <td>Enumeration&lt;String&gt;</td>
                    <td>Vrací enumeraci všech jmen, pod kterými jsou v session uloženy objekty.</td>
                </tr>
                <tr>
                    <td>getCreationTime()</td>
                    <td>long</td>
                    <td>Vrací čas, kdy byla session vytvořena, v milisekundách od půlnoci 1. ledna 1970 GMT.</td>
                </tr>
                <tr>
                    <td>getId()</td>
                    <td>String</td>
                    <td>Vrací unikátní identifikátor, vytvořený pro tuto session.</td>
                </tr>
                <tr>
                    <td>getLastAccessedTime()</td>
                    <td>long</td>
                    <td>Vrací čas, kdy naposled klient poslal na server request spjatý s touto session, v milisekundách od půlnoci 1. ledna 1970 GMT.</td>
                </tr>
                <tr>
                    <td>getMaxInactiveInterval()</td>
                    <td>int</td>
                    <td>Vrací maximální časový interval v sekundách, po který session existuje, pokud klient do té doby neposlal na server žádný request.</td>
                </tr>
                <tr>
                    <td>getServletContext()</td>
                    <td>ServletContext</td>
                    <td>Vrací <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContext.html" target="_blank" class="link">ServletContext</a>, do kterého session patří.</td>
                </tr>
                <tr>
                    <td>invalidate()</td>
                    <td>void</td>
                    <td>Zruší session.</td>
                </tr>
                <tr>
                    <td>isNew()</td>
                    <td>boolean</td>
                    <td>Vrací true, pokud je session nově vytvořená a klient o ní ještě neví.</td>
                </tr>
                <tr>
                    <td>removeAttribute(String name)</td>
                    <td>void</td>
                    <td>Odstraní objekt, uložený v session, podle předaného jména.</td>
                </tr>
                <tr>
                    <td>setAttribute(String name, Object value)</td>
                    <td>void</td>
                    <td>Ukládá objekt do session pod předaným jménem.</td>
                </tr>
                <tr>
                    <td>setMaxInactiveInterval(int interval)</td>
                    <td>void</td>
                    <td>Nastavuje maximální časový interval v sekundách, po který session existuje, pokud klient do té doby neposlal na server žádný request.</td>
                </tr>
            </tbody>
        </table>
        <h3 class="heading-tertiary u-mb-2">Ukázka použití session</h3>
        <p class="paragraph u-mb-2">Pro ukázku práce se session si vytvoříme aplikaci, ve které bude mít uživatel tabulku, do které si bude moci přidávat nové řádky. Vytvoříme si nový Maven projekt, který můžeme pojmenovat třeba jako tabulka. Pro stránku s tabulkou si poté vytvoříme servlet TabulkaServlet. Ukazuje jej následující ukázka. Tento servlet jen získá položky ze session a zobrazí je na stránce v tabulce. Položky se ukládají v LinkedListu. Do session můžeme uložit v podstatě cokoliv, jelikož všechny třídy v Javě implicitně dědí od třídy Object. Při získávání objektu ze session za použití getAttribute metody jej ale musíme castnout, jelikož vrací instanci třídy Object.</p>
        <%- include("./includes/sessions-code-box-1.ejs") %>
        <p class="paragraph u-mb-2">Můžeme si vytvořit soubor web.xml a servlet namapovat třeba na "/polozky".</p>
        <%- include("./includes/sessions-code-box-2.ejs") %>
        <p class="paragraph u-mb-2">Po spuštění aplikace a navštívení <a href="http://localhost:8080/tabulka/polozky" target="_blank" class="link">http://localhost:8080/tabulka/polozky</a>, uvidíte stránku s tabulkou, která zatím neobsahuje žádná data. Tabulka nemá žádné ohraničení, jelikož nepoužíváme žádné CSS styly.</p>
        <img src="../../static/img/screenshots/SessionsTabulkaStranka.png" alt="Stránka s tabulkou" class="image image--full-width image--with-border u-mb-2">
        <p class="paragraph u-mb-2">Pokud se po otevření stránky podívate do vývojářských nástrojů na cookies, tak tam uvidíte cookie pro unikátní identifikátor session. Podle tohoto identifikátoru server pozná, jaká session nám patří.</p>
        <img src="../../static/img/screenshots/SessionID.png" alt="Stránka s tabulkou" class="image image--full-width u-mb-2">
        <p class="paragraph u-mb-2">Pro přidání položky si vytvoříme servlet PridatPolozkuServlet. Následující ukázka ukazuje implementaci doGet metody, která jen vyrenderuje stránku s formulářem.</p>
        <%- include("./includes/sessions-code-box-3.ejs") %>
        <p class="paragraph u-mb-2">Servlet pro přidání položky si namapujeme na "/pridat-polozku, jelikož tam odkazujeme na stránce s tabulkou.</p>
        <%- include("./includes/sessions-code-box-4.ejs") %>
        <p class="paragraph u-mb-2">Pokud teď na stránce s tabulkou kliknete na odkaz "Přidat novou položku", tak se vám zobrazí následující stránka s formulářem pro přidání nové položky.</p>
        <img src="../../static/img/screenshots/SessionsPridatPolozkuStranka.png" alt="Stránka pro přidání položky" class="image image--full-width image--with-border u-mb-2">
        <p class="paragraph u-mb-2">Formulář se posílá na "./pridat-polozku" metodou POST. V servletu PridatPolozkuServlet tedy implementujeme metodu doPost a odeslaný formulář v ní zpracujeme. Přidáme zadanou položku do session a uživatele přesměrujeme na stránku s tabulkou. Následující ukázka implementaci metody doPost ukazuje.</p>
        <%- include("./includes/sessions-code-box-5.ejs") %>
        <p class="paragraph u-mb-2">Naše aplikace je hotová. Můžete si do tabulky zkusit přidat pár položek.</p>
        <img src="../../static/img/screenshots/SessionsTabulkaSPolozkamiStranka.png" alt="Stránka s tabulkou, která obsahuje vytvořené položky" class="image image--full-width image--with-border u-mb-2">
        <p class="paragraph u-mb-2">Pokud jste si do tabulky pár položek přidali a otevřete si aplikaci v jiném prohlížeči nebo alespoň v anonymním okně, tak tam přidané položky neuvidíte, jelikož se vytvoří úplně nová session.</p>
        <p class="paragraph u-mb-2">Je nutné si uvědomit, že session neslouží k permanentnímu uložení dat. Pokud totiž server restartujeme, tak se všechny session smažou. Navíc uživatel k session nemá přístup navždy. Po nějaké době se mu unikátní identifikátor pro session uložený jako cookie smaže. Defaultně se smaže, když uživatel zavře prohlížeč, jelikož pro cookie není nastavena Max-Age ani Expires vlastnost.</p>
        <img src="../../static/img/screenshots/SessionCookie.png" alt="Session cookie" class="image image--full-width u-mb-2">
        <p class="paragraph u-mb-2">Defaultní maximální čas, do kdy session na serveru existuje, pokud klient neposlal na server request spjatý se session, je v Tomcatu 30 minut. U jednotlivých session tento čas můžeme změnit pomocí metody setMaxInactiveInterval. Pokud jej ale chceme změnit pro všechny session, můžeme to udělat pomocí session-config elementu v souboru web.xml, jak ukazuje následující ukázka. Čas se nastavuje v minutách.</p>
        <%- include("./includes/session-config-code-box.ejs") %>
        <p class="paragraph">Pro tuto část je to vše. Nyní již víte, jak můžete uživatele ve své webové aplikaci sledovat. V příští části si ukážeme, jak funguje komunikace mezi servlety.</p>
    <%- include("../../includes/tutorial-page-layout-end.ejs") %>
    <%- include("../../includes/footer.ejs") %>
<%- include("../../includes/page-end.ejs") %>