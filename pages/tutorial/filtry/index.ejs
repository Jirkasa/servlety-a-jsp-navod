<%- include("../../includes/page-start.ejs", {pathToRootFolder: "../../", title: "Filtry", metaDescription: "V této části tutoriálu si ukážeme, jak můžeme omezit přístup k servletům pomocí filtru. A nejen to. Jedná se jen o jednu z věcí, které můžeme pomocí filtrů dělat.", useHighlightJS: true}) %>
    <%- include("../../includes/header.ejs", {pathToRootFolder: "../../", activeLink: "tutorial"}) %>
    <%- include("../../includes/tutorial-page-layout-start.ejs", {pathToTutorialFolder: "./", activeLink: "filtry"}) %>
        <h1 class="heading-primary u-mb-4">Filtry</h1>
        <p class="paragraph u-mb-4">V této části si ukážeme, jak můžeme omezit přístup k servletům pomocí filtrů. A nejen to, jedná se jen o jednu z věcí, které můžeme pomocí filtrů udělat.</p>
        <h2 id="co-je-filtr" class="heading-secondary u-mb-2">Co je Filtr</h2>
        <p class="paragraph u-mb-2">Filtr je objekt, který se spouští před zpracováním a po zpracování requestu. Používá se třeba k implementaci autentizace a autorizace, k logování, a tak podobně. Výhoda filtru je ta, že jej můžeme použít na více servletů. Není nijak závislý na specifickém servletu. Díky tomu je pro nás i jednodušší jeho správa.</p>
        <p class="paragraph u-mb-4">Následující diagram ukazuje, kdy se filter spouští.</p>
        <img src="../../static/img/illustrations/SpusteniFilteru.svg" alt="Diagram, ukazující kdy se filtr spouští" class="image u-mb-4">
        <p class="paragraph u-mb-4">Filtrů může být pro servlet nastavených klidně i více. Filtry se potom budou volat jeden po druhém až k servletu.</p>
        <img src="../../static/img/illustrations/SpusteniViceFilteru.svg" alt="Diagram, ukazující kdy se spouští řetězec filtrů" class="image u-mb-6">
        <h2 id="rozhrani-filter" class="heading-secondary u-mb-2">Rozhraní Filter</h2>
        <p class="paragraph u-mb-2">Filtr můžeme vytvořit implementací <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/Filter.html" target="_blank" class="link">Filter</a> rozhraní. Toto rozhraní definuje tři metody, které popisuje následující tabulka.</p>
        <div class="table-wrapper u-mb-2">
            <table class="table">
                <thead>
                    <tr>
                        <th>Metoda</th>
                        <th>Návratový typ</th>
                        <th>Popis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>init(FilterConfig filterConfig)</td>
                        <td>void</td>
                        <td>Volána servlet containerem (Tomcatem) při vytvoření filtru. Slouží k inicializaci (můžeme třeba načíst nějakou konfiguraci atp.).</td>
                    </tr>
                    <tr>
                        <td>doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</td>
                        <td>void</td>
                        <td>Volána pro provedení filteru (když na server přijde request, nebo je filter další na řadě v řetězci filterů).</td>
                    </tr>
                    <tr>
                        <td>destroy()</td>
                        <td>void</td>
                        <td>Volána servlet containerem (Tomcatem), když se filtr chystá vyřadit z provozu.</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <p class="paragraph u-mb-2">Metody init a destroy mají defaultní implementaci. Pokud je tedy nepotřebujeme, nemusíme je implementovat. Následující ukázka ukazuje příklad, jak může filtr vypadat.</p>
        <%- include("./includes/filter-example-code-box.ejs") %>
        <h2 id="filter-chain" class="heading-secondary u-mb-2">Filter chain</h2>
        <p class="paragraph u-mb-4">V metodě doFilter se jako poslední parametr předává objekt typu <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/FilterChain.html" target="_blank" class="link">FilterChain</a>. Jedná se o rozhraní, které definuje jen jednu metodu jménem doFilter. Tu ve filtru používáme k tomu, abychom předali request ke zpracování servletu nebo dalšímu filtru v řetězci. Slovo chain v češtině vlastně znamená řetězec. FilterChain tedy představuje takový řetězec filtrů směřující k servletu. Pokud v nějakém filtru metodu doFilter objektu FilterChain nezavoláme, tak se řetězec přeruší a request do servletu nedoputuje.</p>
        <h2 id="vytvoreni-filtru" class="heading-secondary u-mb-2">Vytvoření filtru</h2>
        <p class="paragraph u-mb-2">Pro ukázku si vytvoříme projekt, ve kterém budeme mít dva servlety, které jen vyrenderují stránku. Poté vytvoříme filtr, který na tyto servlety aplikujeme. Bude sloužit k tomu, že nám bude na serveru do konzole vypisovat, kdy proběhl request a na jaký servlet. Založíme tedy nový Maven projekt a vytvoříme první servlet. Ukazuje jej následující ukázka.</p>
        <%- include("./includes/logging-filter-code-box-1.ejs") %>
        <p class="paragraph u-mb-2">Druhý servlet bude v podstatě stejný.</p>
        <%- include("./includes/logging-filter-code-box-2.ejs") %>
        <p class="paragraph u-mb-2">Ve web.xml můžeme servlety namapovat třeba na "/servlet-1" a "/servlet-2", jak ukazuje následující ukázka.</p>
        <%- include("./includes/logging-filter-code-box-3.ejs") %>
        <p class="paragraph u-mb-2">Teď se již můžeme pustit do toho hlavního, o co nám tu jde. Vytvoříme si filtr, který nám bude do konzole vypisovat, že proběhl request. Filtr můžeme pojmenovat třeba jako LoggingFilter. Následující ukázka ukazuje jeho implementaci.</p>
        <%- include("./includes/logging-filter-code-box-4.ejs") %>
        <p class="paragraph u-mb-2">Filtry můžeme namapovat na jakýkoliv servlet chceme. To představuje jejich výhodu. Můžeme je přidávat a odstraňovat ze servletů, aniž bychom museli měnit servlety samotné. Dělá se to v souboru web.xml. Nejdříve musíme filtr nadefinovat pomocí elementu filter a poté jej namapovat pomocí elementu filter-mapping. Je to podobné jako u servletů. Element filter má podelement filter-name, který představuje název filtru a podelement filter-class, kde se definuje třída pro filtr. Element filter-mapping má podelement filter-name, který určuje pro jaký filtr provádíme mapování a podelement url-pattern, ve kterém definujeme vzor, podle kterého se filtr na servlety použije. Jelikož chceme náš filtr použít na všechny servlety v aplikaci, tak můžeme jako url-pattern nastavit "/*". Následující ukázka ukazuje náš upravený soubor web.xml.</p>
        <%- include("./includes/logging-filter-code-box-5.ejs") %>
        <p class="paragraph u-mb-2">Pokud si nyní zkusíte jeden ze servletů otevřít, tak se vám v konzoli ve vašem IDE vypíše, že proběhl request.</p>
        <%- include("./includes/logging-filter-console-log.ejs") %>
        <h2 id="zablokovani-pristupu-k-vybranym-servletum" class="heading-secondary u-mb-2">Zablokování přístupu k vybraným servletům</h2>
        <p class="paragraph u-mb-2">Pokud ve filtru nezavoláme metodu doFilter FilterChain objektu, tak se request nedostane k cílovému servletu a nebude jím tedy zpracován. Tímto způsobem bychom tedy mohli vyřešit problém, se kterým jsme se setkali v minulé části.</p>
        <p class="paragraph u-mb-2">Pro ukázku si vytvoříme projekt, kde budeme mít servlet renderující stránku. Přístup k tomuto servletu poté zamezíme pomocí filtru. Založíme tedy nový Maven projekt a vytvoříme servlet, který můžeme pojmenovat třeba jako MujServlet. Ukazuje jej následující ukázka.</p>
        <%- include("./includes/blocking-filter-code-box-1.ejs") %>
        <p class="paragraph u-mb-2">Servlet můžeme namapovat třeba na "/stranka". Vytvoříme tedy soubor web.xml a uděláme to.</p>
        <%- include("./includes/blocking-filter-code-box-2.ejs") %>
        <p class="paragraph u-mb-2">Pokud si aplikaci spustíte a otevřete <a href="http://localhost:8080/blocking-filter/stranka" target="_blank" class="link">http://localhost:8080/blocking-filter/stranka</a>, tak uvidíte stránku, kterou ukazuje následující obrázek.</p>
        <img src="../../static/img/screenshots/StrankaProZablokovaniFiltrem.png" alt="Stránka" class="image image--full-width image--with-border u-mb-2">
        <p class="paragraph u-mb-2">Nyní si náš vytvořený servlet zkusíme zablokovat, aby na něj uživatel nemohl poslat request. Vytvoříme si na to filtr, který pojmenujeme třeba jako BlockingFilter. V tomto filtru nezavoláme metodu doFilter FilterChain objektu, ale pošleme klientovi chybu prostřednictvím sendError metody HttpServletResponse objektu. Následující ukázka filtr ukazuje. Metodou sendError posíláme chybu se status kódem 403, což znamená, že server klientovi odmítá vrátit zdroj, pro který poslal request. Namísto konstanty SC_FORBIDDEN bychom klidně mohli použít i číslo 403.</p>
        <%- include("./includes/blocking-filter-code-box-3.ejs") %>
        <p class="paragraph u-mb-2">Ve web.xml souboru si můžeme filtr namapovat na náš servlet, který renderuje stránku. Tím pádem již nebudeme mít možnost, jak se k němu jako uživatelé dostat.</p>
        <%- include("./includes/blocking-filter-code-box-4.ejs") %>
        <p class="paragraph u-mb-2">Pokud si aplikaci restartujete a zkusíte znovu navštívit <a href="http://localhost:8080/blocking-filter/stranka" target="_blank" class="link">http://localhost:8080/blocking-filter/stranka</a>, tak se vám již nezobrazí stránka jako předtím, ale zobrazí se vám chybová stránka.</p>
        <img src="../../static/img/screenshots/ZablokovaniStrankyFiltrem.png" alt="Chybová stránka" class="image image--full-width image--with-border u-mb-6">
        <h2 id="filter-config" class="heading-secondary u-mb-2">Filter Config</h2>
        <p class="paragraph u-mb-2">Podobně jako si můžeme v souboru web.xml nadefinovat inicializační parametry pro servlety, můžeme si je nadefinovat i pro filtry. Jedná se o hodnoty, které Tomcat předá do filtru když jej inicializuje prostřednictvím init metody. Metoda init přijímá jako parametr objekt typu <a href="https://javaee.github.io/javaee-spec/javadocs/javax/servlet/FilterConfig.html" target="_blank" class="link">FilterConfig</a>, ze kterého můžeme inicializační parametry dostat. Jedná se o rozhraní, které definuje čtyři metody, které popisuje následující tabulka.</p>
        <div class="table-wrapper u-mb-2">
            <table class="table">
                <thead>
                    <tr>
                        <th>Metoda</th>
                        <th>Návratový typ</th>
                        <th>Popis</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>getFilterName()</td>
                        <td>String</td>
                        <td>Vrací název filtru, který je specifikován v souboru web.xml.</td>
                    </tr>
                    <tr>
                        <td>getInitParameter(String name)</td>
                        <td>String</td>
                        <td>Vrací hodnotu inicializačního parametru.</td>
                    </tr>
                    <tr>
                        <td>getInitParameterNames()</td>
                        <td>Enumeration&lt;String&gt;</td>
                        <td>Vrací enumeraci všech jmen inicializačních parametrů pro filtr.</td>
                    </tr>
                    <tr>
                        <td>getServletContext()</td>
                        <td>ServletContext</td>
                        <td>Vrací referenci k servlet contextu, ve kterém se filtr spouští.</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <p class="paragraph u-mb-2">Pro ukázku použití inicializačních parametrů si uprávíme projekt, který jsme si vytvořili pro ukázku zablokování přístupu k servletu. V souboru web.xml si budeme moci nastavit, jaká chybová zpráva se pro zablokovaný servlet vypíše. K definování inicializačních parametrů pro filtry se stejně jako u servletů používá element init-param. Následující ukázka ukazuje náš upravený web.xml soubor.</p>
        <%- include("./includes/filter-config-code-box-1.ejs") %>
        <p class="paragraph u-mb-2">Teď můžeme nadefinovaný inicializační parametr ve filtru získat a použít. Implementujeme metodu init, ve které z FilterConfig objektu parametr získáme a uložíme si jej. Poté jej budeme používat v metodě doFilter. Následující ukázka ukazuje upravený kód.</p>
        <%- include("./includes/filter-config-code-box-2.ejs") %>
        <p class="paragraph u-mb-2">Pokud nyní zkusíte servlet navštívit na <a href="http://localhost:8080/blocking-filter/stranka" target="_blank" class="link">http://localhost:8080/blocking-filter/stranka</a>, tak uvidíte, že se chybová zpráva nastavená jako inicializační parametr na chybové stránce použila.</p>
        <img src="../../static/img/screenshots/ChybovaZpravaNastavenaInicializacnimParametremProFiltr.png" alt="Chybová stránka obsahující chybovou zprávu nastavenou přes inicializační parametr" class="image image--full-width image--with-border u-mb-6">
        <p class="paragraph">Pro tuto část je to vše. Nyní již víte k čemu filtry slouží a jak je použít. V příští části se začneme zabývat JSP.</p>
    <%- include("../../includes/tutorial-page-layout-end.ejs") %>
    <%- include("../../includes/footer.ejs") %>
<%- include("../../includes/page-end.ejs") %>